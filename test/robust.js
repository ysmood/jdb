// Generated by CoffeeScript 1.9.3
var Jdb, assert, dbPath, fs, jdb;

fs = require('fs');

assert = require('assert');

dbPath = 'test/robust.db';

try {
  fs.unlinkSync(dbPath);
} catch (_error) {}

Jdb = require('../lib/jdb');

jdb = Jdb();

describe('Handle exception:', function() {
  before(function() {
    return jdb.init({
      dbPath: dbPath
    });
  });
  it('catch error', function(tdone) {
    return jdb.exec(function(db) {
      return db.doc.b.a = 0;
    }, function(err) {
      if (!err) {
        return tdone('error not catched');
      } else {
        return tdone();
      }
    });
  });
  it('specific error', function(tdone) {
    return jdb.exec(function(db) {
      db.doc.a.un_defined = 10;
      return db.save();
    })["catch"](function(err) {
      var e;
      try {
        assert.equal(err.message.indexOf('un_defined'), 21);
        return tdone();
      } catch (_error) {
        e = _error;
        return tdone(e);
      }
    });
  });
  it('rollback', function(tdone) {
    return jdb.exec(function(db) {
      db.doc.a = 0;
      return db.save();
    }).then(function() {
      return jdb.exec(function(db) {
        db.doc.a = 10;
        return db.doc.b.a = 0;
      });
    })["catch"](function(err) {
      return err.promise.then(function() {
        return jdb.exec(function(db) {
          return db.send(db.doc.a);
        }).then(function(a) {
          assert.equal(a, 0);
          return tdone();
        });
      });
    });
  });
  return it('broken db', function(tdone) {
    jdb = Jdb();
    return jdb.init({
      dbPath: 'test/fixtures/broken',
      compactDBFile: false
    })["catch"](function(err) {
      assert.equal(jdb.doc.a, 10);
      return tdone();
    });
  });
});
